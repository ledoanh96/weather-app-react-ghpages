{"version":3,"sources":["config/index.js","SearchBar/index.js","AutoCompleteMenu/index.js","DisplayMenu/index.js","ForecastMenu/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","proxyURL","autocompleteBaseURL","placeDetailBaseURL","weatherBaseURL","forecastBaseURL","googleKey","weatherKey","SearchBar","onEnterKeyDown","event","keyCode","onSubmit","_this","props","_this$props","this","searchTerm","onSearchTermChange","react_default","a","createElement","TextField_default","value","onChange","onKeyDown","placeholder","Component","AutoCompleteMenu","_ref","predictions","handleOnClick","List_default","dense","map","prediction","i","ListItem_default","key","button","onClick","place_id","ListItemText_default","primary","description","DisplayMenu","displayData","_displayData$location","location","name","region","localtime","_displayData$current","current","_displayData$current$","condition","icon","text","wind_khp","humidity","temp_f","index_es","id","src","ForecastDay","date","imageSrc","temperature","Typography_default","variant","moment","format","alt","ForecastMenu","forecastData","forecastday","forecast","e","ForecastMenu_ForecastDay","day","avgtemp_c","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","target","state","autocompleteURL","concat","fetch","then","res","json","showAutoComplete","hideWeatherContent","getDisplayData","url","myJson","getForecastData","hideAutoComplete","showWeatherContent","emptySearchTerm","placeDetailURL","_myJson$result$geomet","result","geometry","lat","lng","weatherURL","forecastURL","_this$state","SearchBar_SearchBar","src_AutoCompleteMenu","Fragment","DisplayMenu_DisplayMenu","ForecastMenu_ForecastMenu","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.48d21396.chunk.js","sourcesContent":["module.exports = {\r\n  proxyURL: \"https://cors-anywhere.herokuapp.com/\",\r\n  autocompleteBaseURL:\r\n    \"https://maps.googleapis.com/maps/api/place/autocomplete/json?types:(cities)\",\r\n  placeDetailBaseURL:\r\n    \"https://maps.googleapis.com/maps/api/place/details/json?\",\r\n  weatherBaseURL: \"http://api.apixu.com/v1/current.json?\",\r\n  forecastBaseURL:\"http://api.apixu.com/v1/forecast.json?\",\r\n  googleKey: \"AIzaSyCXjMCgV4xSa1GV_qZijGu7ZJHbdNLKEBU\",\r\n  weatherKey: \"3f396c019636440fbc663145182412\"\r\n};\r\n","import React, { Component } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nexport default class SearchBar extends Component {\r\n  onEnterKeyDown = event => {\r\n    if (event.keyCode === 13) {\r\n      const { onSubmit } = this.props;\r\n      onSubmit();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { searchTerm, onSearchTermChange } = this.props;\r\n\r\n    return (\r\n      <TextField\r\n        value={searchTerm}\r\n        onChange={onSearchTermChange}\r\n        onKeyDown={this.onEnterKeyDown}\r\n        placeholder=\"Enter places to search\"\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport List from \"@material-ui/core/List\";\r\n\r\nconst AutoCompleteMenu = ({ predictions, handleOnClick }) => {\r\n  return (\r\n    <List dense={false}>\r\n      {predictions.map((prediction, i) => (\r\n        <ListItem\r\n          key={i}\r\n          button\r\n          onClick={event => handleOnClick(event, prediction.place_id)}\r\n        >\r\n          <ListItemText primary={prediction.description} />\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default AutoCompleteMenu;\r\n","import React, { Component } from \"react\";\r\nimport { Typography, Paper } from \"@material-ui/core\";\r\n\r\nexport default class DisplayMenu extends Component {\r\n  render() {\r\n    const { displayData } = this.props;\r\n    if (displayData) {\r\n      const {\r\n        location: { name, region, localtime },\r\n        current: {\r\n          condition: { icon, text },\r\n          wind_khp,\r\n          humidity,\r\n          temp_f\r\n        }\r\n      } = displayData;\r\n      return (\r\n        <Paper id=\"todayWeather\">\r\n          <Typography id=\"place-name\">\r\n            {name},{region}\r\n          </Typography>\r\n          <div id=\"place-detail\">\r\n            <div id=\"place-detail-right\">\r\n              <Typography>{localtime}</Typography>\r\n              <Typography>{wind_khp}</Typography>\r\n              <Typography>{humidity}</Typography>\r\n            </div>\r\n            <div id=\"place-detail-mid\">\r\n              <img src={icon} />\r\n              <Typography>{text}</Typography>\r\n            </div>\r\n            <div id=\"place-detail-left\">\r\n              <Typography>{temp_f}</Typography>\r\n            </div>\r\n          </div>\r\n        </Paper>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport moment from \"moment\";\r\nimport { Paper } from \"@material-ui/core\";\r\n\r\nconst ForecastDay = ({ date, imageSrc, temperature }) => {\r\n  return (\r\n    <div>\r\n      <Typography variant=\"h6\">\r\n        {moment(date, \"YYYY-MM-DD\").format(\"dddd\")}\r\n      </Typography>\r\n      <img src={imageSrc} alt=\"Weather Icon\" />\r\n      <Typography variant=\"h6\">{temperature}</Typography>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default class ForecastMenu extends Component {\r\n  render() {\r\n    const { forecastData} = this.props;\r\n    if (forecastData) {\r\n      const {\r\n        forecast: { forecastday }\r\n      } = forecastData;\r\n\r\n      return (\r\n        <Paper>\r\n          {forecastday.map((e, i) => (\r\n            <ForecastDay\r\n              key={i}\r\n              date={e.date}\r\n              imageSrc={e.day.condition.icon}\r\n              temperature={e.day.avgtemp_c}\r\n            />\r\n          ))}\r\n        </Paper>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport SearchBar from \"./SearchBar\";\nimport {\n  proxyURL,\n  googleKey,\n  autocompleteBaseURL,\n  weatherBaseURL,\n  weatherKey,\n  placeDetailBaseURL,\n  forecastBaseURL\n} from \"./config\";\nimport AutoCompleteMenu from \"./AutoCompleteMenu\";\nimport DisplayMenu from \"./DisplayMenu\";\nimport ForecastMenu from \"./ForecastMenu\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchTerm: \"\",\n      predictions: [],\n      displayData: null,\n      forecastData: null,\n      showAutoComplete: false,\n      showWeatherContent: false\n    };\n  }\n\n  onSearchTermChange = event => {\n    this.setState({ searchTerm: event.target.value });\n  };\n\n  onSubmit = () => {\n    const { searchTerm } = this.state;\n    const autocompleteURL = `${proxyURL}${autocompleteBaseURL}&input=${searchTerm}&key=${googleKey}`;\n    fetch(autocompleteURL)\n      .then(res => res.json())\n      .then(res => {\n        const { predictions } = res;\n        this.showAutoComplete();\n        this.hideWeatherContent();\n        this.setState({\n          predictions\n        });\n      });\n  };\n\n  getDisplayData = url => {\n    fetch(url)\n      .then(res => res.json())\n      .then(myJson => {\n        this.setState({ displayData: myJson });\n      });\n  };\n\n  getForecastData = url => {\n    fetch(url)\n      .then(res => res.json())\n      .then(myJson => {\n        this.setState({ forecastData: myJson });\n      });\n  };\n\n  hideAutoComplete = () => {\n    this.setState({ showAutoComplete: false });\n  };\n\n  showAutoComplete = () => {\n    this.setState({ showAutoComplete: true });\n  };\n\n  hideWeatherContent = () => {\n    this.setState({ showWeatherContent: false });\n  };\n\n  showWeatherContent = () => {\n    this.setState({ showWeatherContent: true });\n  };\n\n  emptySearchTerm = () => {\n    this.setState({ searchTerm: \"\" });\n  };\n\n  handleOnClick = (event, place_id) => {\n    const placeDetailURL = `${proxyURL}${placeDetailBaseURL}placeid=${place_id}&key=${googleKey}`;\n    fetch(placeDetailURL)\n      .then(res => res.json())\n      .then(myJson => {\n        const {\n          result: {\n            geometry: {\n              location: { lat, lng }\n            }\n          }\n        } = myJson;\n        const weatherURL = `${weatherBaseURL}key=${weatherKey}&q=${lat},${lng}`;\n        const forecastURL = `${forecastBaseURL}key=${weatherKey}&q=${lat},${lng}&days=7`;\n        this.hideAutoComplete();\n        this.showWeatherContent();\n        this.emptySearchTerm();\n        this.getDisplayData(weatherURL);\n        this.getForecastData(forecastURL);\n      });\n  };\n\n  render() {\n    const {\n      searchTerm,\n      predictions,\n      displayData,\n      forecastData,\n      showAutoComplete,\n      showWeatherContent\n    } = this.state;\n    return (\n      <div>\n        <SearchBar\n          searchTerm={searchTerm}\n          onSearchTermChange={this.onSearchTermChange}\n          onSubmit={this.onSubmit}\n        />\n        {showAutoComplete && (\n          <AutoCompleteMenu\n            predictions={predictions}\n            handleOnClick={this.handleOnClick}\n          />\n        )}\n        {showWeatherContent && (\n          <React.Fragment>\n            <DisplayMenu displayData={displayData} />\n            <ForecastMenu forecastData={forecastData} />\n          </React.Fragment>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}